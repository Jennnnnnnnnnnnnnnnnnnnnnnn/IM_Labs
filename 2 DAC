#include "stm32f3xx.h"                  // Device header



int ledflag;

int main(void)
{
RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; //directs clock pulses to the timer
RCC -> AHBENR |=RCC_AHBENR_GPIOEEN;   //enable GPIO port E to sysclk
RCC -> AHBENR |=RCC_AHBENR_GPIOAEN;     //ennable GPIO port A to sysclk
RCC->APB1ENR |= RCC_APB1ENR_DAC1EN;         //connect DAC to sysclk through APB1 i.e. enable clock

TIM3->PSC = 799; // prescalor value in Timer ‘x’ as 799
TIM3->ARR = 999;  // Auto-Reset Register of Timer ‘x’ set to 999 counts - 10 times a second!

ledflag = 0;

TIM3->CR1 |= TIM_CR1_CEN; //enable command to set timer action in motion
//Tell timer to generate interrupt flag for ARR event
//TIM3->DIER &= 0x00000001; //should this be sw in here? (from slides)

TIM3->DIER |= TIM_DIER_UIE; // Set DIER register to watch out for an ‘Update’ Interrupt Enable (UIE) – or 0x00000001. Set the appropriate bits In the ‘TIMx->DIER’ register (DMA/Interrupt Enable Register) so that the event of ‘reaching the ARR value’ will enable an interrupt from the timer to be triggered
NVIC_EnableIRQ(TIM3_IRQn); // Enable Timer ‘x’ interrupt request in NVIC. Set the appropriate flag in the Nested Vector Interrupt Controller (NVIC) to tell it to look out for an interrupt from Timer ‘x’

GPIOE->MODER |= 0x55550000; // set pin 15 to op

GPIOA->MODER |= 0x00000300;               //using DAC1_OUT1 connected to PA.4, configure PA.4 to analog mode
DAC1->CR |= DAC_CR_BOFF1;                 //disable buffer
DAC1->CR |= DAC_CR_EN1;                   //enable DAC 1
while (1)
   {
         
          }   //this while loop from a tutorial


}





void TIM3_IRQHandler() //should void not be written in here? rather than ()
{
    if ((TIM3->SR & TIM_SR_UIF) !=0) // Check interrupt source is from the ‘Update’ interrupt flag
    {


if (ledflag<=255)
{
GPIOE->BSRRH = 0xFF00;
GPIOE->BSRRL = ledflag<<8;
++ledflag;
}
else if (ledflag >255)
{
GPIOE->BSRRH = 0xFF00;
ledflag = 0;
}

DAC1->DHR12R1 |= ledflag; //data from bin count reg to DAC reg   or DAC_DHR12R1
/*OR*/  //GPIOE->ODR |= DAC_DOR1    or DAC1_DOR
 
    TIM3->SR &= ~TIM_SR_UIF; // Reset ‘Update’ interrupt flag in the SR register
}
}
