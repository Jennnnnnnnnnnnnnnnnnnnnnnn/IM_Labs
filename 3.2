
/*Start up PWM*/
#include "stm32f3xx.h" 
int ledflag;
	
void subfunction(void); //subfunc prototype
		
int main(void)
{
/*clocks*/
RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; //enable clock for timer 1 (tim1 = 72MHz)
RCC->AHBENR |= RCC_AHBENR_GPIOEEN; // Enable clock on GPIO port E
RCC->AHBENR |= RCC_AHBENR_GPIOAEN; // Enable clock on GPIO port A
RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; //directs clock pulses to the timer
/*PWM config*/
GPIOE->MODER |= 0x00080000; //set pin 9 to alternate function
GPIOE->AFR[1] |=0x00000020; //Set PE.9 to output TIM1_CH1
TIM1->PSC = 79; // prescalor value in Timer 1 as 79 assuming timer 1 (8MHz) you can also |= this to a bin number
TIM1->ARR = 1000;  // Auto-Reset Register of Timer 1 set to 1000 counts - sets to 200Hz - this is actually 100Hz
TIM1->CCMR1 |= 0x00000060; //set channel 1 timer 1 to PWM mode using CCMR 
TIM1->BDTR |= TIM_BDTR_MOE; //Enable channel 1 to be output to the GPIO pin
TIM1->CCER |=  TIM_CCER_CC1E; // Enable channel 1 to be output in the Capture/Compare Enable register
TIM1->CR1 |= TIM_CR1_CEN; //Enable timer 

subfunction(); // Function call
};


void subfunction(void)
{
ledflag = 0;
RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; //connect config controller to sysclk
EXTI->IMR |= EXTI_IMR_MR0; //unmasks ext 10
EXTI->RTSR |= EXTI_RTSR_TR0; //stes ext 10 gen iINT rising edge
SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA; //config mux options to enable PA.0 to gen INT ext 10
/*interupt config*/
TIM3->PSC = 799; // prescalor value in Timer ‘x’ as 100
TIM3->ARR = 9999;  // Auto-Reset Register of Timer ‘x’ set to 1000 counts
TIM3->CR1 |= TIM_CR1_CEN; //enable command to set timer action in motion 
TIM3->DIER |= TIM_DIER_UIE;
NVIC_EnableIRQ(EXTI0_IRQn);

	
	while (1)
	    {
         
          }   //this while loop from a tutorial


				}
void TIM3_IRQHandler()
{
    if ((TIM3->SR & TIM_SR_UIF) !=0) // Check interrupt source is from the ‘Update’ interrupt flag
    {

/*function isr - cycles through a range of pulses*/
			if (ledflag <=1000)
			{
			TIM1->CCR1 = ledflag;
			ledflag = ledflag + 250;
			GPIOE->BSRRH = ~ledflag;
			GPIOE->BSRRL = ledflag;
			}
			else if (ledflag >1000)
			{
				ledflag=0;
			};
//TIM1->CCR1 = 0; //0% (i.e. 0% of arr)
//TIM1->CCR1 = 250; //25% 
//TIM1->CCR1 = 500; //50% 
//TIM1->CCR1 = 750; //75% 
//TIM1->CCR1 = 1000; //100% 
			}
    
    TIM3->SR &= ~TIM_SR_UIF; // Reset ‘Update’ interrupt flag in the SR register
		}


	/*ISR*/
	void EXTI0_IRQHandler()
{
	if (EXTI->PR & EXTI_PR_PR0) // check source 
	{
	EXTI->PR |= EXTI_PR_PR0; // clear flag*
	//enter func while sth is happening then set sth to low.
	}		
}
